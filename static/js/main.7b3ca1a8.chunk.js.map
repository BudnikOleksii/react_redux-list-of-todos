{"version":3,"sources":["types/User.ts","api.ts","types/Todo.ts","store/user.ts","store/todos.ts","types/FilterType.ts","store/filter.ts","store/index.ts","components/TodoComponent/TodoComponent.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["UserActionTypes","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodosActionTypes","initialState","user","loading","error","actions","type","user_FETCH_START","user_FETCH_SUCCESS","payload","user_FETCH_ERROR","user_FETCH_FINISH","user_UNSELECT","fetchUser","userId","dispatch","getUser","userFromServer","catch","err","finally","userReducer","state","action","FilterType","todos","selectedTodo","todos_FETCH_START","todos_FETCH_SUCCESS","todos_FETCH_ERROR","todos_FETCH_FINISH","todo","todo_SELECT","todo_UNSELECT","fetchTodos","todosFromServer","todosReducer","filterType","All","query","appliedQuery","filterReducer","rootReducer","combineReducers","todosInfo","userInfo","filter","selectors","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoComponent","memo","id","title","completed","useDispatch","useSelector","className","classNames","onClick","todosActions","TodoList","map","TodoFilter","applyQuery","debounce","str","filterActions","value","onChange","event","target","placeholder","style","pointerEvents","Loader","TodoModal","useEffect","userActions","href","email","name","App","filteredTodos","useMemo","lowerCasedQuery","toLowerCase","checkQuery","includes","Active","Completed","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7b3ca1a8.chunk.js","sourcesContent":["import { Maybe } from './Maybe';\n\nexport interface User {\n  id: number;\n  name: string;\n  email: string;\n  phone: string;\n}\n\nexport enum UserActionTypes {\n  user_FETCH_START = 'user_FETCH_START',\n  user_FETCH_SUCCESS = 'user_FETCH_SUCCESS',\n  user_FETCH_ERROR = 'user_FETCH_ERROR',\n  user_FETCH_FINISH = 'user_FETCH_FINISH',\n  user_UNSELECT = 'user_UNSELECT',\n}\n\nexport interface UserFetchStart {\n  type: UserActionTypes.user_FETCH_START,\n}\n\nexport interface UserFetchSuccess {\n  type: UserActionTypes.user_FETCH_SUCCESS,\n  payload: User,\n}\n\nexport interface UserFetchError {\n  type: UserActionTypes.user_FETCH_ERROR,\n  payload: string,\n}\n\nexport interface UserFetchFinish {\n  type: UserActionTypes.user_FETCH_FINISH,\n}\n\nexport interface UserUnselect {\n  type: UserActionTypes.user_UNSELECT,\n}\n\nexport type UserAction = (\n  UserFetchStart | UserFetchSuccess | UserFetchError\n  | UserFetchFinish | UserUnselect\n);\n\nexport interface UserState {\n  user: Maybe<User>,\n  loading: boolean,\n  error: Maybe<string>,\n}\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(1000)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import { Maybe } from './Maybe';\n\nexport interface Todo {\n  id: number;\n  title: string;\n  completed: boolean;\n  userId: number;\n}\n\nexport enum TodosActionTypes {\n  todos_FETCH_START = 'todos_FETCH_START',\n  todos_FETCH_SUCCESS = 'todos_FETCH_SUCCESS',\n  todos_FETCH_ERROR = 'todos_FETCH_ERRO',\n  todos_FETCH_FINISH = 'todos_FETCH_FINISH',\n  todo_SELECT = 'todo_SELECT',\n  todo_UNSELECT = 'todo_UNSELECT',\n}\n\nexport interface TodosFetchStart {\n  type: TodosActionTypes.todos_FETCH_START,\n}\n\nexport interface TodosFetchSuccess {\n  type: TodosActionTypes.todos_FETCH_SUCCESS,\n  payload: Todo[],\n}\n\nexport interface TodosFetchError {\n  type: TodosActionTypes.todos_FETCH_ERROR,\n  payload: string,\n}\n\nexport interface TodosFetchFinish {\n  type: TodosActionTypes.todos_FETCH_FINISH,\n}\n\nexport interface SelectTodo {\n  type: TodosActionTypes.todo_SELECT,\n  payload: Todo,\n}\n\nexport interface UnselectTodo {\n  type: TodosActionTypes.todo_UNSELECT,\n}\n\nexport type TodosAction = (\n  TodosFetchStart | TodosFetchSuccess | TodosFetchError\n  | TodosFetchFinish | SelectTodo | UnselectTodo\n);\n\nexport interface TodosState {\n  todos: Todo[],\n  loading: boolean,\n  error: Maybe<string>,\n  selectedTodo: Maybe<Todo>,\n}\n","import { Dispatch } from 'redux';\nimport {\n  UserFetchError, UserFetchFinish, UserFetchStart, UserFetchSuccess,\n  User, UserAction, UserActionTypes, UserState, UserUnselect,\n} from '../types/User';\nimport { getUser } from '../api';\n\nconst initialState: UserState = {\n  user: null,\n  loading: false,\n  error: null,\n};\n\nexport const actions = {\n  startFetch: (): UserFetchStart => ({\n    type: UserActionTypes.user_FETCH_START,\n  }),\n  setUser: (user: User): UserFetchSuccess => ({\n    type: UserActionTypes.user_FETCH_SUCCESS,\n    payload: user,\n  }),\n  setError: (error: string): UserFetchError => ({\n    type: UserActionTypes.user_FETCH_ERROR,\n    payload: error,\n  }),\n  finishFetch: (): UserFetchFinish => ({\n    type: UserActionTypes.user_FETCH_FINISH,\n  }),\n  userUnselect: (): UserUnselect => ({ type: UserActionTypes.user_UNSELECT }),\n};\n\nexport const fetchUser = (userId: number) => {\n  return (dispatch: Dispatch<UserAction>) => {\n    dispatch(actions.startFetch());\n\n    getUser(userId)\n      .then(userFromServer => dispatch(actions.setUser(userFromServer)))\n      .catch(err => dispatch(actions.setError(err)))\n      .finally(() => dispatch(actions.finishFetch()));\n  };\n};\n\nconst userReducer = (\n  state = initialState,\n  action: UserAction,\n) : UserState => {\n  switch (action.type) {\n    case UserActionTypes.user_FETCH_START:\n      return {\n        ...state,\n        loading: true,\n      };\n    case UserActionTypes.user_FETCH_SUCCESS:\n      return {\n        ...state,\n        user: action.payload,\n      };\n    case UserActionTypes.user_FETCH_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n      };\n    case UserActionTypes.user_FETCH_FINISH:\n      return {\n        ...state,\n        loading: false,\n      };\n    case UserActionTypes.user_UNSELECT:\n      return {\n        ...state,\n        user: null,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default userReducer;\n","import { Dispatch } from 'redux';\nimport {\n  SelectTodo,\n  Todo,\n  TodosAction,\n  TodosActionTypes,\n  TodosFetchError,\n  TodosFetchFinish,\n  TodosFetchStart,\n  TodosFetchSuccess,\n  TodosState,\n  UnselectTodo,\n} from '../types/Todo';\nimport { getTodos } from '../api';\n\nconst initialState: TodosState = {\n  todos: [],\n  loading: false,\n  error: null,\n  selectedTodo: null,\n};\n\nexport const actions = {\n  startFetch: (): TodosFetchStart => ({\n    type: TodosActionTypes.todos_FETCH_START,\n  }),\n  setTodos: (todos: Todo[]): TodosFetchSuccess => ({\n    type: TodosActionTypes.todos_FETCH_SUCCESS,\n    payload: todos,\n  }),\n  setError: (error: string): TodosFetchError => ({\n    type: TodosActionTypes.todos_FETCH_ERROR,\n    payload: error,\n  }),\n  finishFetch: (): TodosFetchFinish => ({\n    type: TodosActionTypes.todos_FETCH_FINISH,\n  }),\n  selectTodo: (todo: Todo): SelectTodo => ({\n    type: TodosActionTypes.todo_SELECT,\n    payload: todo,\n  }),\n  unselectTodo: (): UnselectTodo => ({ type: TodosActionTypes.todo_UNSELECT }),\n};\n\nexport const fetchTodos = () => {\n  return (dispatch: Dispatch<TodosAction>) => {\n    dispatch(actions.startFetch());\n\n    getTodos()\n      .then(todosFromServer => dispatch(actions.setTodos(todosFromServer)))\n      .catch(err => dispatch(actions.setError(err)))\n      .finally(() => dispatch(actions.finishFetch()));\n  };\n};\n\nconst todosReducer = (\n  state = initialState,\n  action: TodosAction,\n) : TodosState => {\n  switch (action.type) {\n    case TodosActionTypes.todos_FETCH_START:\n      return {\n        ...state,\n        loading: true,\n      };\n    case TodosActionTypes.todos_FETCH_SUCCESS:\n      return {\n        ...state,\n        todos: action.payload,\n      };\n    case TodosActionTypes.todos_FETCH_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n      };\n    case TodosActionTypes.todos_FETCH_FINISH:\n      return {\n        ...state,\n        loading: false,\n      };\n    case TodosActionTypes.todo_SELECT:\n      return {\n        ...state,\n        selectedTodo: action.payload,\n      };\n    case TodosActionTypes.todo_UNSELECT:\n      return {\n        ...state,\n        selectedTodo: null,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","export enum FilterType {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { FilterType } from '../types/FilterType';\n\ntype SetFilterType = {\n  type: 'filter/SET_FILTERTYPE';\n  payload: string;\n};\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string,\n};\n\ntype SetAppliedQueryAction = {\n  type: 'filter/SET_APPLIEDQUERY';\n  payload: string,\n};\n\ntype Action = SetFilterType | SetQueryAction | SetAppliedQueryAction;\n\ntype FilterState = {\n  filterType: string,\n  query: string,\n  appliedQuery: string,\n};\n\nconst initialState: FilterState = {\n  filterType: FilterType.All,\n  query: '',\n  appliedQuery: '',\n};\n\nexport const actions = {\n  setFilterType: (filterType: string): SetFilterType => ({\n    type: 'filter/SET_FILTERTYPE',\n    payload: filterType,\n  }),\n  setQuery: (query: string): SetQueryAction => ({\n    type: 'filter/SET_QUERY',\n    payload: query,\n  }),\n  setAppliedQuery: (query: string): SetAppliedQueryAction => ({\n    type: 'filter/SET_APPLIEDQUERY',\n    payload: query,\n  }),\n};\n\nconst filterReducer = (\n  state = initialState,\n  action: Action,\n): FilterState => {\n  switch (action.type) {\n    case 'filter/SET_FILTERTYPE':\n      return {\n        ...state,\n        filterType: action.payload,\n      };\n\n    case 'filter/SET_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/SET_APPLIEDQUERY':\n      return {\n        ...state,\n        appliedQuery: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport userReducer from './user';\nimport todosReducer from './todos';\nimport filterReducer from './filter';\n\nconst rootReducer = combineReducers({\n  todosInfo: todosReducer,\n  userInfo: userReducer,\n  filter: filterReducer,\n});\n\ntype RootState = ReturnType<typeof rootReducer>;\n\nexport const selectors = {\n  getUserInfo: (state: RootState) => state.userInfo,\n  getTodosInfo: (state: RootState) => state.todosInfo,\n  getFilter: (state: RootState) => state.filter,\n};\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n","import { FC, memo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { selectors } from '../../store';\nimport { actions as todosActions } from '../../store/todos';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoComponent: FC<Props> = memo(({ todo }) => {\n  const {\n    id, title, completed, userId,\n  } = todo;\n\n  const dispatch = useDispatch();\n  const { selectedTodo } = useSelector(selectors.getTodosInfo);\n\n  return (\n    <tr\n      key={id}\n      data-cy=\"todo\"\n      className={classNames({\n        'has-background-info-light': selectedTodo?.id === id,\n      })}\n    >\n      <td className=\"is-vcentered\">{userId}</td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p className={completed ? 'has-text-success' : 'has-text-danger'}>\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => dispatch(todosActions.selectTodo(todo))}\n        >\n          <span className=\"icon\">\n            <i\n              className={\n                selectedTodo?.id !== id\n                  ? 'far fa-eye'\n                  : 'far fa-eye-slash'\n              }\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n});\n","import { FC, memo } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoComponent } from '../TodoComponent';\n\ninterface Props {\n  todos: Todo[];\n}\n\nexport const TodoList: FC<Props> = memo(({ todos }) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => <TodoComponent key={todo.id} todo={todo} />)}\n    </tbody>\n  </table>\n));\n","import { FC, memo } from 'react';\nimport debounce from 'lodash.debounce';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actions as filterActions } from '../../store/filter';\nimport { FilterType } from '../../types/FilterType';\nimport { selectors } from '../../store';\n\nexport const TodoFilter: FC = memo(() => {\n  const dispatch = useDispatch();\n  const { filterType, query } = useSelector(selectors.getFilter);\n\n  const setAppliedQuery = (str: string) => {\n    dispatch(filterActions.setAppliedQuery(str));\n  };\n\n  const applyQuery = debounce(setAppliedQuery, 500);\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filterType}\n            onChange={(event) => {\n              dispatch(\n                filterActions.setFilterType(event.target.value as FilterType),\n              );\n            }}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event) => {\n            const { value } = event.target;\n\n            dispatch(filterActions.setQuery(value));\n            applyQuery(value);\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => {\n                dispatch(filterActions.setQuery(''));\n                applyQuery('');\n              }}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { FC, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { selectors } from '../../store';\nimport { actions as userActions, fetchUser } from '../../store/user';\nimport { actions as todosActions } from '../../store/todos';\n\ninterface Props {\n  todo: Todo;\n}\n\nexport const TodoModal: FC<Props> = ({ todo }) => {\n  const dispatch = useDispatch();\n  const { user, loading } = useSelector(selectors.getUserInfo);\n\n  useEffect(() => {\n    dispatch(fetchUser(todo.userId));\n\n    return () => {\n      dispatch(userActions.userUnselect());\n    };\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {loading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(todosActions.unselectTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport { FC, useEffect, useMemo } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { FilterType } from './types/FilterType';\nimport { selectors } from './store';\nimport { fetchTodos } from './store/todos';\n\nexport const App: FC = () => {\n  const dispatch = useDispatch();\n  const { todos, loading, selectedTodo } = useSelector(selectors.getTodosInfo);\n  const { filterType, appliedQuery } = useSelector(selectors.getFilter);\n\n  useEffect(() => {\n    dispatch(fetchTodos());\n  }, []);\n\n  const filteredTodos = useMemo(() => {\n    const lowerCasedQuery = appliedQuery.toLowerCase();\n\n    return todos.filter(todo => {\n      const checkQuery = todo.title.toLowerCase().includes(lowerCasedQuery);\n\n      switch (filterType) {\n        case FilterType.All:\n          return checkQuery;\n        case FilterType.Active:\n          return checkQuery && !todo.completed;\n        case FilterType.Completed:\n          return checkQuery && todo.completed;\n        default:\n          return true;\n      }\n    });\n  }, [todos, appliedQuery, filterType]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {loading ? (\n                <Loader />\n              ) : (\n                <TodoList todos={filteredTodos} />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal todo={selectedTodo} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}